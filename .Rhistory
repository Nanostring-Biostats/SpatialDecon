load("C:/Users/pdanaher/Desktop/phase_ii_dataframes.RData")
ls()
str(norm)
dim(norm)
dim(raw)
sd(rt(1000, 2))
sd(rt(1000, 20))
sd(rt(1000, 2000))
sd(rt(1000, 20000))
load("C:/Users/pdanaher/Desktop/TCGA beta hats - zilionis.RData")
ls()
length(betas)
rm(list = ls())
load("C:/Users/pdanaher/Documents/nanostring-cell-mixture-deconvolution/training matrix derivation pipeline/intermediate data/TCGA beta hats - zilionis.RData")
ls()
dim(betas)
dim(betas[[1]])
betas[[1]]
pairs(t(betas[[1]]))
load("C:/Users/pdanaher/Desktop/TCGA beta hats - zilionis.RData")
names(betas)
rownames(betas[[1]])
load("C:/Users/pdanaher/Desktop/bc360SignatureCollection.RData")
ls()
str(bc360SignatureCOllection)
library(devtools)
install_github("NanoString-Biostats/NanoStringSignatureBase")
install.packages("C:/Users/pdanaher/Desktop/Rpackages-master/Rpackages-master/NanoStringSignatureBase.zip", repos = NULL, type = "win.binary")
library("NanoStringSignatureBase")
library("NanoStringSignatureBase")
library(NanoStringSignatureBase)
install_github("NanoString-Biostats/Rpackages/NanoStringSignatureBase")
install_github("Nanostring-Biostats/Rpackages/tree/master/NanoStringSignatureBase")
install.packages("C:/Users/pdanaher/Desktop/Rpackages-master/Rpackages-master/NanoStringSignatureBase.zip", repos = NULL, type = "win.binary")
library(NanoStringSignatureBase)
ls()
str(bc360SignatureCollection)
(bc360SignatureCollection)
load("C:/Users/pdanaher/Desktop/fibroblast_genes_gx.RData")
ls()
str(F)
str(gx_fibroblast)
str(gx_fibroblast[[1]])
str(gx_fibroblast[[2]])
head(gx_fibroblast[[2]])
dim(gx_fibroblast[[2]])
load("C:/Users/pdanaher/Documents/nanostring-cell-mixture-deconvolution/scratch space/bakeoff - residsd weighting - in progress.RData")
ls()
dim(betas)
str(betas)
head(betas[[1]][[1]])
rowMeans(betas[[1]][[1]])
hist(rnorm(100), breaks = 40, col = 4)
library(NormDSP)
?eval_protein_signal
library(InSituSort)
cellcols
load("C:/Users/pdanaher/Downloads/tcga.all.mutfreqs.nosilentmuts.RData")
ls()
str(tcgamutfreq)
load("C:/Users/pdanaher/Downloads/tcga.all.mutfreqs.nosilentmuts.RData")
ls()
temp = tcgamutfreq
name = tmb = c()
id = c())
id = c()
for (name in names(temp)){id = c(id, names(temp[[name]])); tmb = c(tmp, temp[[name]])}
for (name in names(temp)){id = c(id, names(temp[[name]])); tmb = c(tmb, temp[[name]])}
id = tmb = c()
for (name in names(temp)){id = c(id, names(temp[[name]])); tmb = c(tmb, temp[[name]])}
length(id)
length(tmb)
head(id)
head(tmb)
write.csv(cbind(id, tmb), row.names = F, file = "TMB.csv")
getwd()
load("C:/Users/pdanaher/Downloads/20200213_2054_RData.RData")
ls()
hist(apply(dfs[[2]], 2, quantile, 0.75)
)
hist(apply(dfs[[2]][, -1], 2, quantile, 0.75))
load("C:/Users/pdanaher/Documents/BC360-manuscript/data/bc360 datasets.RData")
ls()
str(rsnorm)
head(bcannot)
names(annotlist)
load("C:/Users/pdanaher/Documents/BC360-manuscript/data/bc360 datasets.RData")
ls()
names(annotlist)
str(annotlist)
load("C:/Users/pdanaher/Documents/BC360-manuscript/data_pre_pipeline/BC360 datasets/puma data.RData")
rm(list = ls())
load("C:/Users/pdanaher/Documents/BC360-manuscript/data_pre_pipeline/BC360 datasets/puma data.RData")
ls()
str(pumadata)
names(pumadata)
load("C:/Users/pdanaher/Documents/BC360-manuscript/data/bc360 datasets.RData")
ls()
str(bcannot)
names(annotlist)
library(NormDSP)
??NormDSP
data(NormDSP::mini_DSP_experiment)
data("mini_DSP_experiment")
ls()
rawdata[1:10,1:10]
head(annot)
22*12
setwd("C:/Users/pdanaher/Box Sync/cell signatures/manuscript/fig s1 - log linear cartoon")
rm(list = ls())
library(e1071)
library(scales)
# load TCGA LUAD:
load("LUSC.RData")
# linear and logscale data:
lindat = LUSC.dat.subset$e
logdat = log2(LUSC.dat.subset$e)
rm(LUSC.dat.subset)
# calculate skew for all genes, in both logscale and linear scale:
skew.lin = apply(lindat, 2, skewness)
skew.log = apply(logdat, 2, skewness)
denslin = density(skew.lin[!is.na(skew.lin)])
denslog = density(skew.log[!is.na(skew.log)])
par(mar = c(4,4,.1,.1))
plot(denslin, col = 0, xlab = "Skewness of genes in TCGA LUAD", ylab = "",
cex.lab = 1.2, cex.axis = 0.7, main = "", ylim = c(0, max(denslog$y)))
polygon(denslin, col = alpha("grey50", 0.5), border = NA)
polygon(denslog, col = alpha("orange", 0.5), border = NA)
legend("topright", fill = alpha(c("grey50", "orange"), 0.5),
legend = c("Linear-scale data", "Log-transformed data"), cex = 1)
# summary stats:
mean(skew.lin > 2, na.rm = T)
mean(abs(skew.log) > 2, na.rm = T)
hist(skew.lin, col = alpha("grey50", 0.5), border = NA, ylab = "Number of genes", xlab = "Skewness",
breaks = seq(-5,25, length.out = 100), ylim = c(0, 4000))
hist(skew.log, add = TRUE, col = alpha("orange", 0.5), border = NA,
breaks = seq(-5,25, length.out = 100))
# show mean-variance relationship on logscale, linear scale:
means.lin = apply(lindat, 2, mean)
means.log = apply(logdat, 2, mean)
sds.lin = apply(lindat, 2, sd)
sds.log = apply(logdat, 2, sd)
# summary stats:
range(sds.lin[means.lin > 0])
range(sds.lin[means.lin > 0])[2] / range(sds.lin[means.lin > 0])[1]
range(sds.log, na.rm = T)
range(sds.log, na.rm = T)[2] / range(sds.log, na.rm = T)[1]
par(mar = c(4,4,.1,1))
par(mfrow = c(1,2))
plot(log2(means.lin), log2(sds.lin), log = "", xlab = "Mean", ylab = "SD",
col = alpha("dodgerblue4", 0.05), pch = 16, xaxt = "n", yaxt = "n")
axis(1, at = log2(10^seq(-3, 5, 2)), labels = 10^(seq(-3, 5, 2)), cex.axis = 0.65)
axis(2, at = log2(10^seq(-15, 15, 2)), labels = 10^(seq(-15, 15, 2)), cex.axis = 0.75)
legend("top", legend = "linear-scale data    ", bty = "n")
lines(lowess(log(means.lin[sds.lin > 0]), log(sds.lin[sds.lin > 0])), col = "orange", lwd = 2)
plot(means.log, sds.log, xlab = "Mean", ylab = "SD",
col = alpha("dodgerblue4", 0.05), pch = 16, cex.axis = 0.65)
legend("top", legend = "log2-scale data    ", bty = "n")
lines(lowess(means.log[!is.na(sds.log)], sds.log[!is.na(sds.log)]), col = "orange", lwd = 2)
dev.off()
gene = "CD274"
par(mfrow = c(1, 2))
par(mar = c(4,4,1,.1))
hist(lindat[, gene], breaks = 30, col = alpha("grey50", 0.5), border = NA, main = "",
xlab = paste0("Linear-scale ", gene, " expression"), ylab = "",
yaxt = "n", cex.axis = 0.65)
legend("center", legend = paste0("skewness = ", round(skewness(lindat[, gene]), 1)), bty = "n")
hist(logdat[, gene], breaks = 30, col = alpha("orange", 0.5), border = NA, main = "",
xlab = paste0("Log-scale ", gene, " expression"), ylab = "",
yaxt = "n", cex.axis = 0.65)
legend("center", legend = paste0("skewness = ", round(skewness(logdat[, gene]), 1)), bty = "n")
# histograms of CD274
svg("gene histograms.svg", height = 3.1, width = 6)
gene = "CD274"
par(mfrow = c(1, 2))
par(mar = c(4,1,1,.1))
hist(lindat[, gene], breaks = 30, col = alpha("grey50", 0.5), border = NA, main = "",
xlab = paste0("Linear-scale ", gene, " expression"), ylab = "",
yaxt = "n", cex.axis = 0.65)
legend("center", legend = paste0("skewness = ", round(skewness(lindat[, gene]), 1)), bty = "n")
hist(logdat[, gene], breaks = 30, col = alpha("orange", 0.5), border = NA, main = "",
xlab = paste0("Log-scale ", gene, " expression"), ylab = "",
yaxt = "n", cex.axis = 0.65)
legend("center", legend = paste0("skewness = ", round(skewness(logdat[, gene]), 1)), bty = "n")
dev.off()
setwd("~/nanostring-cell-mixture-deconvolution")
##### this script contains the code used to build the package.
rm(list=ls())
setwd("~/nanostring-cell-mixture-deconvolution")
library("devtools")
library(roxygen2)
setwd("InSituSort")
devtools::document()
devtools::document()
devtools::document()
devtools::test() # run unit tests
devtools::check()
devtools::check()
devtools::use_vignette("my-vignette")
usethis::use_vignette("my-vignette")
setwd("~/nanostring-cell-mixture-deconvolution/InSituSort/vignettes")
getwd()
setwd("~/nanostring-cell-mixture-deconvolution")
setwd("InSituSort")
devtools::document()
devtools::check()
devtools::check()
source('C:/Users/pdanaher/Desktop/update pandoc.R', echo=TRUE)
